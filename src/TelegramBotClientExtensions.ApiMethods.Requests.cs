using Telegram.Bot.Exceptions;
using Telegram.Bot.Requests;
using Telegram.Bot.Requests.Abstractions;

namespace Telegram.Bot;

#pragma warning disable CS8604

public partial class WTelegramBotClient : ITelegramBotClient
{
	///<inheritdoc />
	public virtual async Task<TResponse> MakeRequestAsync<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken)
	{
		return (TResponse)(object)(request switch
		{
			GetUpdatesRequest r => await GetUpdatesAsync(r.Offset, r.Limit, r.Timeout, r.AllowedUpdates, cancellationToken),
			SetWebhookRequest r => await SetWebhookAsync(r.Url, r.Certificate, r.IpAddress, r.MaxConnections, r.AllowedUpdates, r.DropPendingUpdates, r.SecretToken, cancellationToken).ReturnTrue(),
			DeleteWebhookRequest r => await DeleteWebhookAsync(r.DropPendingUpdates, cancellationToken).ReturnTrue(),
			GetWebhookInfoRequest => await GetWebhookInfoAsync(cancellationToken),
			GetMeRequest => await GetMeAsync(cancellationToken),
			LogOutRequest => await LogOutAsync(cancellationToken).ReturnTrue(),
			CloseRequest => await CloseAsync(cancellationToken).ReturnTrue(),
			SendMessageRequest r => await SendTextMessageAsync(r.ChatId, r.Text, r.MessageThreadId, r.ParseMode, r.Entities, r.LinkPreviewOptions, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			ForwardMessageRequest r => await ForwardMessageAsync(r.ChatId, r.FromChatId, r.MessageId, r.MessageThreadId, r.DisableNotification, r.ProtectContent, cancellationToken),
			ForwardMessagesRequest r => await ForwardMessagesAsync(r.ChatId, r.FromChatId, r.MessageIds, r.MessageThreadId, r.DisableNotification, r.ProtectContent, cancellationToken),
			CopyMessageRequest r => await CopyMessageAsync(r.ChatId, r.FromChatId, r.MessageId, r.MessageThreadId, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.DisableNotification, r.ProtectContent, r.ReplyParameters, r.ReplyMarkup, cancellationToken),
			CopyMessagesRequest r => await CopyMessagesAsync(r.ChatId, r.FromChatId, r.MessageIds, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.RemoveCaption, cancellationToken),
			SendPhotoRequest r => await SendPhotoAsync(r.ChatId, r.Photo, r.MessageThreadId, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.HasSpoiler, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendAudioRequest r => await SendAudioAsync(r.ChatId, r.Audio, r.MessageThreadId, r.Caption, r.ParseMode, r.CaptionEntities, r.Duration, r.Performer, r.Title, r.Thumbnail, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendDocumentRequest r => await SendDocumentAsync(r.ChatId, r.Document, r.MessageThreadId, r.Thumbnail, r.Caption, r.ParseMode, r.CaptionEntities, r.DisableContentTypeDetection, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendVideoRequest r => await SendVideoAsync(r.ChatId, r.Video, r.MessageThreadId, r.Duration, r.Width, r.Height, r.Thumbnail, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.HasSpoiler, r.SupportsStreaming, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendAnimationRequest r => await SendAnimationAsync(r.ChatId, r.Animation, r.MessageThreadId, r.Duration, r.Width, r.Height, r.Thumbnail, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.HasSpoiler, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendVoiceRequest r => await SendVoiceAsync(r.ChatId, r.Voice, r.MessageThreadId, r.Caption, r.ParseMode, r.CaptionEntities, r.Duration, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendVideoNoteRequest r => await SendVideoNoteAsync(r.ChatId, r.VideoNote, r.MessageThreadId, r.Duration, r.Length, r.Thumbnail, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendPaidMediaRequest r => await SendPaidMedia(r.ChatId, r.StarCount, r.Media, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.DisableNotification, r.ProtectContent, r.ReplyParameters, r.ReplyMarkup, cancellationToken),
			SendMediaGroupRequest r => await SendMediaGroupAsync(r.ChatId, r.Media, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.BusinessConnectionId, cancellationToken),
			SendLocationRequest r => await SendLocationAsync(r.ChatId, r.Latitude, r.Longitude, r.MessageThreadId, r.HorizontalAccuracy, r.LivePeriod, r.Heading, r.ProximityAlertRadius, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendVenueRequest r => await SendVenueAsync(r.ChatId, r.Latitude, r.Longitude, r.Title, r.Address, r.MessageThreadId, r.FoursquareId, r.FoursquareType, r.GooglePlaceId, r.GooglePlaceType, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendContactRequest r => await SendContactAsync(r.ChatId, r.PhoneNumber, r.FirstName, r.MessageThreadId, r.LastName, r.Vcard, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendPollRequest r => await SendPollAsync(r.ChatId, r.Question, r.Options, r.MessageThreadId, r.QuestionParseMode, r.QuestionEntities, r.IsAnonymous ?? true, r.Type, r.AllowsMultipleAnswers, r.CorrectOptionId, r.Explanation, r.ExplanationParseMode, r.ExplanationEntities, r.OpenPeriod, r.CloseDate, r.IsClosed, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendDiceRequest r => await SendDiceAsync(r.ChatId, r.MessageThreadId, r.Emoji, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SendChatActionRequest r => await SendChatActionAsync(r.ChatId, r.Action, r.MessageThreadId, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			SetMessageReactionRequest r => await SetMessageReactionAsync(r.ChatId, r.MessageId, r.Reaction, r.IsBig, cancellationToken).ReturnTrue(),
			GetUserProfilePhotosRequest r => await GetUserProfilePhotosAsync(r.UserId, r.Offset, r.Limit, cancellationToken),
			GetFileRequest r => await GetFileAsync(r.FileId, cancellationToken),
			BanChatMemberRequest r => await BanChatMemberAsync(r.ChatId, r.UserId, r.UntilDate, r.RevokeMessages, cancellationToken).ReturnTrue(),
			UnbanChatMemberRequest r => await UnbanChatMemberAsync(r.ChatId, r.UserId, r.OnlyIfBanned, cancellationToken).ReturnTrue(),
			RestrictChatMemberRequest r => await RestrictChatMemberAsync(r.ChatId, r.UserId, r.Permissions, r.UseIndependentChatPermissions, r.UntilDate, cancellationToken).ReturnTrue(),
			PromoteChatMemberRequest r => await PromoteChatMemberAsync(r.ChatId, r.UserId, r.IsAnonymous, r.CanManageChat, r.CanDeleteMessages, r.CanManageVideoChats, r.CanRestrictMembers, r.CanPromoteMembers, r.CanChangeInfo, r.CanInviteUsers, r.CanPostStories, r.CanEditStories, r.CanDeleteStories, r.CanPostMessages, r.CanEditMessages, r.CanPinMessages, r.CanManageTopics, cancellationToken).ReturnTrue(),
			SetChatAdministratorCustomTitleRequest r => await SetChatAdministratorCustomTitleAsync(r.ChatId, r.UserId, r.CustomTitle, cancellationToken).ReturnTrue(),
			BanChatSenderChatRequest r => await BanChatSenderChatAsync(r.ChatId, r.SenderChatId, cancellationToken).ReturnTrue(),
			UnbanChatSenderChatRequest r => await UnbanChatSenderChatAsync(r.ChatId, r.SenderChatId, cancellationToken).ReturnTrue(),
			SetChatPermissionsRequest r => await SetChatPermissionsAsync(r.ChatId, r.Permissions, r.UseIndependentChatPermissions, cancellationToken).ReturnTrue(),
			ExportChatInviteLinkRequest r => await ExportChatInviteLinkAsync(r.ChatId, cancellationToken),
			CreateChatInviteLinkRequest r => await CreateChatInviteLinkAsync(r.ChatId, r.Name, r.ExpireDate, r.MemberLimit, r.CreatesJoinRequest, cancellationToken),
			EditChatInviteLinkRequest r => await EditChatInviteLinkAsync(r.ChatId, r.InviteLink, r.Name, r.ExpireDate, r.MemberLimit, r.CreatesJoinRequest, cancellationToken),
			RevokeChatInviteLinkRequest r => await RevokeChatInviteLinkAsync(r.ChatId, r.InviteLink, cancellationToken),
			ApproveChatJoinRequest r => await ApproveChatJoinRequest(r.ChatId, r.UserId, cancellationToken),
			DeclineChatJoinRequest r => await DeclineChatJoinRequest(r.ChatId, r.UserId, cancellationToken),
			SetChatPhotoRequest r => await SetChatPhotoAsync(r.ChatId, r.Photo, cancellationToken).ReturnTrue(),
			DeleteChatPhotoRequest r => await DeleteChatPhotoAsync(r.ChatId, cancellationToken).ReturnTrue(),
			SetChatTitleRequest r => await SetChatTitleAsync(r.ChatId, r.Title, cancellationToken).ReturnTrue(),
			SetChatDescriptionRequest r => await SetChatDescriptionAsync(r.ChatId, r.Description, cancellationToken).ReturnTrue(),
			PinChatMessageRequest r => await PinChatMessageAsync(r.ChatId, r.MessageId, r.DisableNotification, cancellationToken).ReturnTrue(),
			UnpinChatMessageRequest r => await UnpinChatMessageAsync(r.ChatId, r.MessageId, cancellationToken).ReturnTrue(),
			UnpinAllChatMessagesRequest r => await UnpinAllChatMessages(r.ChatId, cancellationToken).ReturnTrue(),
			LeaveChatRequest r => await LeaveChatAsync(r.ChatId, cancellationToken).ReturnTrue(),
			GetChatRequest r => await GetChatAsync(r.ChatId, cancellationToken),
			GetChatAdministratorsRequest r => await GetChatAdministratorsAsync(r.ChatId, cancellationToken),
			GetChatMemberCountRequest r => await GetChatMemberCountAsync(r.ChatId, cancellationToken),
			GetChatMemberRequest r => await GetChatMemberAsync(r.ChatId, r.UserId, cancellationToken),
			SetChatStickerSetRequest r => await SetChatStickerSetAsync(r.ChatId, r.StickerSetName, cancellationToken).ReturnTrue(),
			DeleteChatStickerSetRequest r => await DeleteChatStickerSetAsync(r.ChatId, cancellationToken).ReturnTrue(),
			GetForumTopicIconStickersRequest => await GetForumTopicIconStickersAsync(cancellationToken),
			CreateForumTopicRequest r => await CreateForumTopicAsync(r.ChatId, r.Name, r.IconColor, r.IconCustomEmojiId, cancellationToken),
			EditForumTopicRequest r => await EditForumTopicAsync(r.ChatId, r.MessageThreadId, r.Name, r.IconCustomEmojiId, cancellationToken).ReturnTrue(),
			CloseForumTopicRequest r => await CloseForumTopicAsync(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			ReopenForumTopicRequest r => await ReopenForumTopicAsync(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			DeleteForumTopicRequest r => await DeleteForumTopicAsync(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			UnpinAllForumTopicMessagesRequest r => await UnpinAllForumTopicMessagesAsync(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			EditGeneralForumTopicRequest r => await EditGeneralForumTopicAsync(r.ChatId, r.Name, cancellationToken).ReturnTrue(),
			CloseGeneralForumTopicRequest r => await CloseGeneralForumTopicAsync(r.ChatId, cancellationToken).ReturnTrue(),
			ReopenGeneralForumTopicRequest r => await ReopenGeneralForumTopicAsync(r.ChatId, cancellationToken).ReturnTrue(),
			HideGeneralForumTopicRequest r => await HideGeneralForumTopicAsync(r.ChatId, cancellationToken).ReturnTrue(),
			UnhideGeneralForumTopicRequest r => await UnhideGeneralForumTopicAsync(r.ChatId, cancellationToken).ReturnTrue(),
			UnpinAllGeneralForumTopicMessagesRequest r => await UnpinAllGeneralForumTopicMessagesAsync(r.ChatId, cancellationToken).ReturnTrue(),
			AnswerCallbackQueryRequest r => await AnswerCallbackQueryAsync(r.CallbackQueryId, r.Text, r.ShowAlert, r.Url, r.CacheTime, cancellationToken).ReturnTrue(),
			GetUserChatBoostsRequest r => await GetUserChatBoostsAsync(r.ChatId, r.UserId, cancellationToken),
			GetBusinessConnectionRequest r => await GetBusinessConnectionAsync(r.BusinessConnectionId, cancellationToken),
			SetMyCommandsRequest r => await SetMyCommandsAsync(r.Commands, r.Scope, r.LanguageCode, cancellationToken).ReturnTrue(),
			DeleteMyCommandsRequest r => await DeleteMyCommandsAsync(r.Scope, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyCommandsRequest r => await GetMyCommandsAsync(r.Scope, r.LanguageCode, cancellationToken),
			SetMyNameRequest r => await SetMyNameAsync(r.Name, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyNameRequest r => await GetMyNameAsync(r.LanguageCode, cancellationToken),
			SetMyDescriptionRequest r => await SetMyDescriptionAsync(r.Description, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyDescriptionRequest r => await GetMyDescriptionAsync(r.LanguageCode, cancellationToken),
			SetMyShortDescriptionRequest r => await SetMyShortDescriptionAsync(r.ShortDescription, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyShortDescriptionRequest r => await GetMyShortDescriptionAsync(r.LanguageCode, cancellationToken),
			SetChatMenuButtonRequest r => await SetChatMenuButtonAsync(r.ChatId, r.MenuButton, cancellationToken).ReturnTrue(),
			GetChatMenuButtonRequest r => await GetChatMenuButtonAsync(r.ChatId, cancellationToken),
			SetMyDefaultAdministratorRightsRequest r => await SetMyDefaultAdministratorRightsAsync(r.Rights, r.ForChannels, cancellationToken).ReturnTrue(),
			GetMyDefaultAdministratorRightsRequest r => await GetMyDefaultAdministratorRightsAsync(r.ForChannels, cancellationToken),
			EditMessageTextRequest r => await EditMessageTextAsync(r.ChatId, r.MessageId, r.Text, r.ParseMode, r.Entities, r.LinkPreviewOptions, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageTextRequest r => await EditMessageTextAsync(r.InlineMessageId, r.Text, r.ParseMode, r.Entities, r.LinkPreviewOptions, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageCaptionRequest r => await EditMessageCaptionAsync(r.ChatId, r.MessageId, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageCaptionRequest r => await EditMessageCaptionAsync(r.InlineMessageId, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageMediaRequest r => await EditMessageMediaAsync(r.ChatId, r.MessageId, r.Media, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageMediaRequest r => await EditMessageMediaAsync(r.InlineMessageId, r.Media, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageLiveLocationRequest r => await EditMessageLiveLocationAsync(r.ChatId, r.MessageId, r.Latitude, r.Longitude, r.LivePeriod, r.HorizontalAccuracy, r.Heading, r.ProximityAlertRadius, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageLiveLocationRequest r => await EditMessageLiveLocationAsync(r.InlineMessageId, r.Latitude, r.Longitude, r.LivePeriod, r.HorizontalAccuracy, r.Heading, r.ProximityAlertRadius, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			StopMessageLiveLocationRequest r => await StopMessageLiveLocationAsync(r.ChatId, r.MessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			StopInlineMessageLiveLocationRequest r => await StopMessageLiveLocationAsync(r.InlineMessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageReplyMarkupRequest r => await EditMessageReplyMarkupAsync(r.ChatId, r.MessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageReplyMarkupRequest r => await EditMessageReplyMarkupAsync(r.InlineMessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			StopPollRequest r => await StopPollAsync(r.ChatId, r.MessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			DeleteMessageRequest r => await DeleteMessageAsync(r.ChatId, r.MessageId, cancellationToken).ReturnTrue(),
			DeleteMessagesRequest r => await DeleteMessagesAsync(r.ChatId, r.MessageIds, cancellationToken).ReturnTrue(),
			SendStickerRequest r => await SendStickerAsync(r.ChatId, r.Sticker, r.MessageThreadId, r.Emoji, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			GetStickerSetRequest r => await GetStickerSetAsync(r.Name, cancellationToken),
			GetCustomEmojiStickersRequest r => await GetCustomEmojiStickersAsync(r.CustomEmojiIds, cancellationToken),
			UploadStickerFileRequest r => await UploadStickerFileAsync(r.UserId, r.Sticker, r.StickerFormat, cancellationToken),
			CreateNewStickerSetRequest r => await CreateNewStickerSetAsync(r.UserId, r.Name, r.Title, r.Stickers, r.StickerType, r.NeedsRepainting, cancellationToken).ReturnTrue(),
			AddStickerToSetRequest r => await AddStickerToSetAsync(r.UserId, r.Name, r.Sticker, cancellationToken).ReturnTrue(),
			SetStickerPositionInSetRequest r => await SetStickerPositionInSetAsync(r.Sticker, r.Position, cancellationToken).ReturnTrue(),
			DeleteStickerFromSetRequest r => await DeleteStickerFromSetAsync(r.Sticker, cancellationToken).ReturnTrue(),
			ReplaceStickerInSetRequest r => await ReplaceStickerInSetAsync(r.UserId, r.Name, r.OldSticker, r.Sticker, cancellationToken).ReturnTrue(),
			SetStickerEmojiListRequest r => await SetStickerEmojiListAsync(r.Sticker, r.EmojiList, cancellationToken).ReturnTrue(),
			SetStickerKeywordsRequest r => await SetStickerKeywordsAsync(r.Sticker, r.Keywords, cancellationToken).ReturnTrue(),
			SetStickerMaskPositionRequest r => await SetStickerMaskPositionAsync(r.Sticker, r.MaskPosition, cancellationToken).ReturnTrue(),
			SetStickerSetTitleRequest r => await SetStickerSetTitleAsync(r.Name, r.Title, cancellationToken).ReturnTrue(),
			SetStickerSetThumbnailRequest r => await SetStickerSetThumbnailAsync(r.Name, r.UserId, r.Format, r.Thumbnail, cancellationToken).ReturnTrue(),
			SetCustomEmojiStickerSetThumbnailRequest r => await SetCustomEmojiStickerSetThumbnailAsync(r.Name, r.CustomEmojiId, cancellationToken).ReturnTrue(),
			DeleteStickerSetRequest r => await DeleteStickerSetAsync(r.Name, cancellationToken).ReturnTrue(),
			AnswerInlineQueryRequest r => await AnswerInlineQueryAsync(r.InlineQueryId, r.Results, r.CacheTime, r.IsPersonal, r.NextOffset, r.Button, cancellationToken).ReturnTrue(),
			AnswerWebAppQueryRequest r => await AnswerWebAppQueryAsync(r.WebAppQueryId, r.Result, cancellationToken),
			SendInvoiceRequest r => await SendInvoiceAsync(r.ChatId, r.Title, r.Description, r.Payload, r.ProviderToken, r.Currency, r.Prices, r.MessageThreadId, r.MaxTipAmount, r.SuggestedTipAmounts, r.StartParameter, r.ProviderData, r.PhotoUrl, r.PhotoSize, r.PhotoWidth, r.PhotoHeight, r.NeedName, r.NeedPhoneNumber, r.NeedEmail, r.NeedShippingAddress, r.SendPhoneNumberToProvider, r.SendEmailToProvider, r.IsFlexible, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, cancellationToken),
			CreateInvoiceLinkRequest r => await CreateInvoiceLinkAsync(r.Title, r.Description, r.Payload, r.ProviderToken, r.Currency, r.Prices, r.MaxTipAmount, r.SuggestedTipAmounts, r.ProviderData, r.PhotoUrl, r.PhotoSize, r.PhotoWidth, r.PhotoHeight, r.NeedName, r.NeedPhoneNumber, r.NeedEmail, r.NeedShippingAddress, r.SendPhoneNumberToProvider, r.SendEmailToProvider, r.IsFlexible, cancellationToken),
			AnswerShippingQueryRequest r => r.Ok ? await AnswerShippingQueryAsync(r.ShippingQueryId, r.ShippingOptions, cancellationToken).ReturnTrue()
			                                     : await AnswerShippingQueryAsync(r.ShippingQueryId, r.ErrorMessage, cancellationToken).ReturnTrue(),
			AnswerPreCheckoutQueryRequest r => r.Ok ? await AnswerPreCheckoutQueryAsync(r.PreCheckoutQueryId, cancellationToken).ReturnTrue()
			                                        : await AnswerPreCheckoutQueryAsync(r.PreCheckoutQueryId, r.ErrorMessage, cancellationToken).ReturnTrue(),
			GetStarTransactionsRequest r => await GetStarTransactions(r.Offset, r.Limit, cancellationToken),
			RefundStarPaymentRequest r => await RefundStarPayment(r.UserId, r.TelegramPaymentChargeId, cancellationToken).ReturnTrue(),
			SetPassportDataErrorsRequest r => await SetPassportDataErrors(r.UserId, r.Errors, cancellationToken).ReturnTrue(),
			SendGameRequest r => await SendGameAsync(r.ChatId, r.GameShortName, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.ReplyParameters, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			SetGameScoreRequest r => await SetGameScoreAsync(r.UserId, r.Score, r.ChatId, r.MessageId, r.Force, r.DisableEditMessage, cancellationToken),
			SetInlineGameScoreRequest r => await SetGameScoreAsync(r.UserId, r.Score, r.InlineMessageId, r.Force, r.DisableEditMessage, cancellationToken).ReturnTrue(),
			GetGameHighScoresRequest r => await GetGameHighScoresAsync(r.UserId, r.ChatId, r.MessageId, cancellationToken),
			GetInlineGameHighScoresRequest r => await GetGameHighScoresAsync(r.UserId, r.InlineMessageId, cancellationToken),
			_ => throw new ApiRequestException("Not found", 404)
		});
	}
}